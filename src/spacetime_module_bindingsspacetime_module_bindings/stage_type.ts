// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

// This was generated using spacetimedb cli version 1.3.2 (commit ).

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  Identity,
  ProductType,
  ProductTypeElement,
  SubscriptionBuilderImpl,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
  type CallReducerFlags,
  type DbContext,
  type ErrorContextInterface,
  type Event,
  type EventContextInterface,
  type ReducerEventContextInterface,
  type SubscriptionEventContextInterface,
} from "@clockworklabs/spacetimedb-sdk";
// A namespace for generated variants and helper functions.
export namespace Stage {
  // These are the generated variant types for each variant of the tagged union.
  // One type is generated per variant and will be used in the `value` field of
  // the tagged union.
  export type Idea = { tag: "Idea" };
  export type Drafting = { tag: "Drafting" };
  export type PriorArt = { tag: "PriorArt" };
  export type Filing = { tag: "Filing" };
  export type Examination = { tag: "Examination" };
  export type OfficeAction = { tag: "OfficeAction" };
  export type Appeal = { tag: "Appeal" };
  export type Grant = { tag: "Grant" };
  export type Maintenance = { tag: "Maintenance" };

  // Helper functions for constructing each variant of the tagged union.
  // ```
  // const foo = Foo.A(42);
  // assert!(foo.tag === "A");
  // assert!(foo.value === 42);
  // ```
  export const Idea = { tag: "Idea" };
  export const Drafting = { tag: "Drafting" };
  export const PriorArt = { tag: "PriorArt" };
  export const Filing = { tag: "Filing" };
  export const Examination = { tag: "Examination" };
  export const OfficeAction = { tag: "OfficeAction" };
  export const Appeal = { tag: "Appeal" };
  export const Grant = { tag: "Grant" };
  export const Maintenance = { tag: "Maintenance" };

  export function getTypeScriptAlgebraicType(): AlgebraicType {
    return AlgebraicType.createSumType([
      new SumTypeVariant("Idea", AlgebraicType.createProductType([])),
      new SumTypeVariant("Drafting", AlgebraicType.createProductType([])),
      new SumTypeVariant("PriorArt", AlgebraicType.createProductType([])),
      new SumTypeVariant("Filing", AlgebraicType.createProductType([])),
      new SumTypeVariant("Examination", AlgebraicType.createProductType([])),
      new SumTypeVariant("OfficeAction", AlgebraicType.createProductType([])),
      new SumTypeVariant("Appeal", AlgebraicType.createProductType([])),
      new SumTypeVariant("Grant", AlgebraicType.createProductType([])),
      new SumTypeVariant("Maintenance", AlgebraicType.createProductType([])),
    ]);
  }

  export function serialize(writer: BinaryWriter, value: Stage): void {
      Stage.getTypeScriptAlgebraicType().serialize(writer, value);
  }

  export function deserialize(reader: BinaryReader): Stage {
      return Stage.getTypeScriptAlgebraicType().deserialize(reader);
  }

}

// The tagged union or sum type for the algebraic type `Stage`.
export type Stage = Stage.Idea | Stage.Drafting | Stage.PriorArt | Stage.Filing | Stage.Examination | Stage.OfficeAction | Stage.Appeal | Stage.Grant | Stage.Maintenance;

export default Stage;

