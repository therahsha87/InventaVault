// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

// This was generated using spacetimedb cli version 1.3.2 (commit ).

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  Identity,
  ProductType,
  ProductTypeElement,
  SubscriptionBuilderImpl,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
  type CallReducerFlags,
  type DbContext,
  type ErrorContextInterface,
  type Event,
  type EventContextInterface,
  type ReducerEventContextInterface,
  type SubscriptionEventContextInterface,
} from "@clockworklabs/spacetimedb-sdk";
// A namespace for generated variants and helper functions.
export namespace DocGenStatus {
  // These are the generated variant types for each variant of the tagged union.
  // One type is generated per variant and will be used in the `value` field of
  // the tagged union.
  export type NotStarted = { tag: "NotStarted" };
  export type InProgress = { tag: "InProgress" };
  export type Completed = { tag: "Completed" };
  export type Failed = { tag: "Failed" };

  // Helper functions for constructing each variant of the tagged union.
  // ```
  // const foo = Foo.A(42);
  // assert!(foo.tag === "A");
  // assert!(foo.value === 42);
  // ```
  export const NotStarted = { tag: "NotStarted" };
  export const InProgress = { tag: "InProgress" };
  export const Completed = { tag: "Completed" };
  export const Failed = { tag: "Failed" };

  export function getTypeScriptAlgebraicType(): AlgebraicType {
    return AlgebraicType.createSumType([
      new SumTypeVariant("NotStarted", AlgebraicType.createProductType([])),
      new SumTypeVariant("InProgress", AlgebraicType.createProductType([])),
      new SumTypeVariant("Completed", AlgebraicType.createProductType([])),
      new SumTypeVariant("Failed", AlgebraicType.createProductType([])),
    ]);
  }

  export function serialize(writer: BinaryWriter, value: DocGenStatus): void {
      DocGenStatus.getTypeScriptAlgebraicType().serialize(writer, value);
  }

  export function deserialize(reader: BinaryReader): DocGenStatus {
      return DocGenStatus.getTypeScriptAlgebraicType().deserialize(reader);
  }

}

// The tagged union or sum type for the algebraic type `DocGenStatus`.
export type DocGenStatus = DocGenStatus.NotStarted | DocGenStatus.InProgress | DocGenStatus.Completed | DocGenStatus.Failed;

export default DocGenStatus;

