// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

// This was generated using spacetimedb cli version 1.3.2 (commit ).

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  Identity,
  ProductType,
  ProductTypeElement,
  SubscriptionBuilderImpl,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
  type CallReducerFlags,
  type DbContext,
  type ErrorContextInterface,
  type Event,
  type EventContextInterface,
  type ReducerEventContextInterface,
  type SubscriptionEventContextInterface,
} from "@clockworklabs/spacetimedb-sdk";

// Import and reexport all reducer arg types
import { AddBlockchainRecord } from "./add_blockchain_record_reducer.ts";
export { AddBlockchainRecord };
import { AddPriorArtResult } from "./add_prior_art_result_reducer.ts";
export { AddPriorArtResult };
import { AddToPortfolio } from "./add_to_portfolio_reducer.ts";
export { AddToPortfolio };
import { AnalyticsTick } from "./analytics_tick_reducer.ts";
export { AnalyticsTick };
import { CloseCollabSession } from "./close_collab_session_reducer.ts";
export { CloseCollabSession };
import { ConnectInventor } from "./connect_inventor_reducer.ts";
export { ConnectInventor };
import { IdentityConnected } from "./identity_connected_reducer.ts";
export { IdentityConnected };
import { IdentityDisconnected } from "./identity_disconnected_reducer.ts";
export { IdentityDisconnected };
import { JoinCollabSession } from "./join_collab_session_reducer.ts";
export { JoinCollabSession };
import { LeaveCollabSession } from "./leave_collab_session_reducer.ts";
export { LeaveCollabSession };
import { MonitorTick } from "./monitor_tick_reducer.ts";
export { MonitorTick };
import { RegisterInventor } from "./register_inventor_reducer.ts";
export { RegisterInventor };
import { ResolveAlert } from "./resolve_alert_reducer.ts";
export { ResolveAlert };
import { RespondConnection } from "./respond_connection_reducer.ts";
export { RespondConnection };
import { StartCollabSession } from "./start_collab_session_reducer.ts";
export { StartCollabSession };
import { SubmitPatent } from "./submit_patent_reducer.ts";
export { SubmitPatent };
import { UpdatePatentStatus } from "./update_patent_status_reducer.ts";
export { UpdatePatentStatus };
import { UpdateStageProgress } from "./update_stage_progress_reducer.ts";
export { UpdateStageProgress };
import { UpsertDocumentGeneration } from "./upsert_document_generation_reducer.ts";
export { UpsertDocumentGeneration };

// Import and reexport all table handle types
import { AnalyticsScheduleTableHandle } from "./analytics_schedule_table.ts";
export { AnalyticsScheduleTableHandle };
import { BlockchainRecordTableHandle } from "./blockchain_record_table.ts";
export { BlockchainRecordTableHandle };
import { CollabParticipantTableHandle } from "./collab_participant_table.ts";
export { CollabParticipantTableHandle };
import { CollabSessionTableHandle } from "./collab_session_table.ts";
export { CollabSessionTableHandle };
import { DocumentGenerationTableHandle } from "./document_generation_table.ts";
export { DocumentGenerationTableHandle };
import { InfringementAlertTableHandle } from "./infringement_alert_table.ts";
export { InfringementAlertTableHandle };
import { InventorTableHandle } from "./inventor_table.ts";
export { InventorTableHandle };
import { InventorConnectionTableHandle } from "./inventor_connection_table.ts";
export { InventorConnectionTableHandle };
import { MarketTrendSnapshotTableHandle } from "./market_trend_snapshot_table.ts";
export { MarketTrendSnapshotTableHandle };
import { MonitoringScheduleTableHandle } from "./monitoring_schedule_table.ts";
export { MonitoringScheduleTableHandle };
import { PatentApplicationTableHandle } from "./patent_application_table.ts";
export { PatentApplicationTableHandle };
import { PortfolioEntryTableHandle } from "./portfolio_entry_table.ts";
export { PortfolioEntryTableHandle };
import { PriorArtResultTableHandle } from "./prior_art_result_table.ts";
export { PriorArtResultTableHandle };
import { StageProgressTableHandle } from "./stage_progress_table.ts";
export { StageProgressTableHandle };

// Import and reexport all types
import { AlertSeverity } from "./alert_severity_type.ts";
export { AlertSeverity };
import { AnalyticsSchedule } from "./analytics_schedule_type.ts";
export { AnalyticsSchedule };
import { BlockchainRecord } from "./blockchain_record_type.ts";
export { BlockchainRecord };
import { CollabStatus } from "./collab_status_type.ts";
export { CollabStatus };
import { CollaborationSession } from "./collaboration_session_type.ts";
export { CollaborationSession };
import { ConnectionStatus } from "./connection_status_type.ts";
export { ConnectionStatus };
import { DocGenStatus } from "./doc_gen_status_type.ts";
export { DocGenStatus };
import { DocType } from "./doc_type_type.ts";
export { DocType };
import { DocumentGeneration } from "./document_generation_type.ts";
export { DocumentGeneration };
import { InfringementAlert } from "./infringement_alert_type.ts";
export { InfringementAlert };
import { InventorConnection } from "./inventor_connection_type.ts";
export { InventorConnection };
import { InventorProfile } from "./inventor_profile_type.ts";
export { InventorProfile };
import { MarketTrendSnapshot } from "./market_trend_snapshot_type.ts";
export { MarketTrendSnapshot };
import { MonitoringSchedule } from "./monitoring_schedule_type.ts";
export { MonitoringSchedule };
import { PatentApplication } from "./patent_application_type.ts";
export { PatentApplication };
import { PatentPortfolioEntry } from "./patent_portfolio_entry_type.ts";
export { PatentPortfolioEntry };
import { PatentStatus } from "./patent_status_type.ts";
export { PatentStatus };
import { PortfolioRole } from "./portfolio_role_type.ts";
export { PortfolioRole };
import { PriorArtResult } from "./prior_art_result_type.ts";
export { PriorArtResult };
import { SessionParticipant } from "./session_participant_type.ts";
export { SessionParticipant };
import { Stage } from "./stage_type.ts";
export { Stage };
import { StageProgress } from "./stage_progress_type.ts";
export { StageProgress };
import { TrendMetric } from "./trend_metric_type.ts";
export { TrendMetric };

const REMOTE_MODULE = {
  tables: {
    analytics_schedule: {
      tableName: "analytics_schedule",
      rowType: AnalyticsSchedule.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: AnalyticsSchedule.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    blockchain_record: {
      tableName: "blockchain_record",
      rowType: BlockchainRecord.getTypeScriptAlgebraicType(),
      primaryKey: "recordId",
      primaryKeyInfo: {
        colName: "recordId",
        colType: BlockchainRecord.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    collab_participant: {
      tableName: "collab_participant",
      rowType: SessionParticipant.getTypeScriptAlgebraicType(),
      primaryKey: "rowId",
      primaryKeyInfo: {
        colName: "rowId",
        colType: SessionParticipant.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    collab_session: {
      tableName: "collab_session",
      rowType: CollaborationSession.getTypeScriptAlgebraicType(),
      primaryKey: "sessionId",
      primaryKeyInfo: {
        colName: "sessionId",
        colType: CollaborationSession.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    document_generation: {
      tableName: "document_generation",
      rowType: DocumentGeneration.getTypeScriptAlgebraicType(),
      primaryKey: "docId",
      primaryKeyInfo: {
        colName: "docId",
        colType: DocumentGeneration.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    infringement_alert: {
      tableName: "infringement_alert",
      rowType: InfringementAlert.getTypeScriptAlgebraicType(),
      primaryKey: "alertId",
      primaryKeyInfo: {
        colName: "alertId",
        colType: InfringementAlert.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    inventor: {
      tableName: "inventor",
      rowType: InventorProfile.getTypeScriptAlgebraicType(),
      primaryKey: "identity",
      primaryKeyInfo: {
        colName: "identity",
        colType: InventorProfile.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    inventor_connection: {
      tableName: "inventor_connection",
      rowType: InventorConnection.getTypeScriptAlgebraicType(),
      primaryKey: "connectionId",
      primaryKeyInfo: {
        colName: "connectionId",
        colType: InventorConnection.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    market_trend_snapshot: {
      tableName: "market_trend_snapshot",
      rowType: MarketTrendSnapshot.getTypeScriptAlgebraicType(),
      primaryKey: "snapshotId",
      primaryKeyInfo: {
        colName: "snapshotId",
        colType: MarketTrendSnapshot.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    monitoring_schedule: {
      tableName: "monitoring_schedule",
      rowType: MonitoringSchedule.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: MonitoringSchedule.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    patent_application: {
      tableName: "patent_application",
      rowType: PatentApplication.getTypeScriptAlgebraicType(),
      primaryKey: "applicationId",
      primaryKeyInfo: {
        colName: "applicationId",
        colType: PatentApplication.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    portfolio_entry: {
      tableName: "portfolio_entry",
      rowType: PatentPortfolioEntry.getTypeScriptAlgebraicType(),
      primaryKey: "entryId",
      primaryKeyInfo: {
        colName: "entryId",
        colType: PatentPortfolioEntry.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    prior_art_result: {
      tableName: "prior_art_result",
      rowType: PriorArtResult.getTypeScriptAlgebraicType(),
      primaryKey: "resultId",
      primaryKeyInfo: {
        colName: "resultId",
        colType: PriorArtResult.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    stage_progress: {
      tableName: "stage_progress",
      rowType: StageProgress.getTypeScriptAlgebraicType(),
      primaryKey: "progressId",
      primaryKeyInfo: {
        colName: "progressId",
        colType: StageProgress.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
  },
  reducers: {
    add_blockchain_record: {
      reducerName: "add_blockchain_record",
      argsType: AddBlockchainRecord.getTypeScriptAlgebraicType(),
    },
    add_prior_art_result: {
      reducerName: "add_prior_art_result",
      argsType: AddPriorArtResult.getTypeScriptAlgebraicType(),
    },
    add_to_portfolio: {
      reducerName: "add_to_portfolio",
      argsType: AddToPortfolio.getTypeScriptAlgebraicType(),
    },
    analytics_tick: {
      reducerName: "analytics_tick",
      argsType: AnalyticsTick.getTypeScriptAlgebraicType(),
    },
    close_collab_session: {
      reducerName: "close_collab_session",
      argsType: CloseCollabSession.getTypeScriptAlgebraicType(),
    },
    connect_inventor: {
      reducerName: "connect_inventor",
      argsType: ConnectInventor.getTypeScriptAlgebraicType(),
    },
    identity_connected: {
      reducerName: "identity_connected",
      argsType: IdentityConnected.getTypeScriptAlgebraicType(),
    },
    identity_disconnected: {
      reducerName: "identity_disconnected",
      argsType: IdentityDisconnected.getTypeScriptAlgebraicType(),
    },
    join_collab_session: {
      reducerName: "join_collab_session",
      argsType: JoinCollabSession.getTypeScriptAlgebraicType(),
    },
    leave_collab_session: {
      reducerName: "leave_collab_session",
      argsType: LeaveCollabSession.getTypeScriptAlgebraicType(),
    },
    monitor_tick: {
      reducerName: "monitor_tick",
      argsType: MonitorTick.getTypeScriptAlgebraicType(),
    },
    register_inventor: {
      reducerName: "register_inventor",
      argsType: RegisterInventor.getTypeScriptAlgebraicType(),
    },
    resolve_alert: {
      reducerName: "resolve_alert",
      argsType: ResolveAlert.getTypeScriptAlgebraicType(),
    },
    respond_connection: {
      reducerName: "respond_connection",
      argsType: RespondConnection.getTypeScriptAlgebraicType(),
    },
    start_collab_session: {
      reducerName: "start_collab_session",
      argsType: StartCollabSession.getTypeScriptAlgebraicType(),
    },
    submit_patent: {
      reducerName: "submit_patent",
      argsType: SubmitPatent.getTypeScriptAlgebraicType(),
    },
    update_patent_status: {
      reducerName: "update_patent_status",
      argsType: UpdatePatentStatus.getTypeScriptAlgebraicType(),
    },
    update_stage_progress: {
      reducerName: "update_stage_progress",
      argsType: UpdateStageProgress.getTypeScriptAlgebraicType(),
    },
    upsert_document_generation: {
      reducerName: "upsert_document_generation",
      argsType: UpsertDocumentGeneration.getTypeScriptAlgebraicType(),
    },
  },
  versionInfo: {
    cliVersion: "1.3.2",
  },
  // Constructors which are used by the DbConnectionImpl to
  // extract type information from the generated RemoteModule.
  //
  // NOTE: This is not strictly necessary for `eventContextConstructor` because
  // all we do is build a TypeScript object which we could have done inside the
  // SDK, but if in the future we wanted to create a class this would be
  // necessary because classes have methods, so we'll keep it.
  eventContextConstructor: (imp: DbConnectionImpl, event: Event<Reducer>) => {
    return {
      ...(imp as DbConnection),
      event
    }
  },
  dbViewConstructor: (imp: DbConnectionImpl) => {
    return new RemoteTables(imp);
  },
  reducersConstructor: (imp: DbConnectionImpl, setReducerFlags: SetReducerFlags) => {
    return new RemoteReducers(imp, setReducerFlags);
  },
  setReducerFlagsConstructor: () => {
    return new SetReducerFlags();
  }
}

// A type representing all the possible variants of a reducer.
export type Reducer = never
| { name: "AddBlockchainRecord", args: AddBlockchainRecord }
| { name: "AddPriorArtResult", args: AddPriorArtResult }
| { name: "AddToPortfolio", args: AddToPortfolio }
| { name: "AnalyticsTick", args: AnalyticsTick }
| { name: "CloseCollabSession", args: CloseCollabSession }
| { name: "ConnectInventor", args: ConnectInventor }
| { name: "IdentityConnected", args: IdentityConnected }
| { name: "IdentityDisconnected", args: IdentityDisconnected }
| { name: "JoinCollabSession", args: JoinCollabSession }
| { name: "LeaveCollabSession", args: LeaveCollabSession }
| { name: "MonitorTick", args: MonitorTick }
| { name: "RegisterInventor", args: RegisterInventor }
| { name: "ResolveAlert", args: ResolveAlert }
| { name: "RespondConnection", args: RespondConnection }
| { name: "StartCollabSession", args: StartCollabSession }
| { name: "SubmitPatent", args: SubmitPatent }
| { name: "UpdatePatentStatus", args: UpdatePatentStatus }
| { name: "UpdateStageProgress", args: UpdateStageProgress }
| { name: "UpsertDocumentGeneration", args: UpsertDocumentGeneration }
;

export class RemoteReducers {
  constructor(private connection: DbConnectionImpl, private setCallReducerFlags: SetReducerFlags) {}

  addBlockchainRecord(applicationId: bigint, txHash: string, network: string) {
    const __args = { applicationId, txHash, network };
    let __writer = new BinaryWriter(1024);
    AddBlockchainRecord.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("add_blockchain_record", __argsBuffer, this.setCallReducerFlags.addBlockchainRecordFlags);
  }

  onAddBlockchainRecord(callback: (ctx: ReducerEventContext, applicationId: bigint, txHash: string, network: string) => void) {
    this.connection.onReducer("add_blockchain_record", callback);
  }

  removeOnAddBlockchainRecord(callback: (ctx: ReducerEventContext, applicationId: bigint, txHash: string, network: string) => void) {
    this.connection.offReducer("add_blockchain_record", callback);
  }

  addPriorArtResult(applicationId: bigint, source: string, url: string, summary: string, relevanceScore: number) {
    const __args = { applicationId, source, url, summary, relevanceScore };
    let __writer = new BinaryWriter(1024);
    AddPriorArtResult.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("add_prior_art_result", __argsBuffer, this.setCallReducerFlags.addPriorArtResultFlags);
  }

  onAddPriorArtResult(callback: (ctx: ReducerEventContext, applicationId: bigint, source: string, url: string, summary: string, relevanceScore: number) => void) {
    this.connection.onReducer("add_prior_art_result", callback);
  }

  removeOnAddPriorArtResult(callback: (ctx: ReducerEventContext, applicationId: bigint, source: string, url: string, summary: string, relevanceScore: number) => void) {
    this.connection.offReducer("add_prior_art_result", callback);
  }

  addToPortfolio(applicationId: bigint, role: PortfolioRole) {
    const __args = { applicationId, role };
    let __writer = new BinaryWriter(1024);
    AddToPortfolio.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("add_to_portfolio", __argsBuffer, this.setCallReducerFlags.addToPortfolioFlags);
  }

  onAddToPortfolio(callback: (ctx: ReducerEventContext, applicationId: bigint, role: PortfolioRole) => void) {
    this.connection.onReducer("add_to_portfolio", callback);
  }

  removeOnAddToPortfolio(callback: (ctx: ReducerEventContext, applicationId: bigint, role: PortfolioRole) => void) {
    this.connection.offReducer("add_to_portfolio", callback);
  }

  analyticsTick(info: AnalyticsSchedule) {
    const __args = { info };
    let __writer = new BinaryWriter(1024);
    AnalyticsTick.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("analytics_tick", __argsBuffer, this.setCallReducerFlags.analyticsTickFlags);
  }

  onAnalyticsTick(callback: (ctx: ReducerEventContext, info: AnalyticsSchedule) => void) {
    this.connection.onReducer("analytics_tick", callback);
  }

  removeOnAnalyticsTick(callback: (ctx: ReducerEventContext, info: AnalyticsSchedule) => void) {
    this.connection.offReducer("analytics_tick", callback);
  }

  closeCollabSession(sessionId: bigint) {
    const __args = { sessionId };
    let __writer = new BinaryWriter(1024);
    CloseCollabSession.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("close_collab_session", __argsBuffer, this.setCallReducerFlags.closeCollabSessionFlags);
  }

  onCloseCollabSession(callback: (ctx: ReducerEventContext, sessionId: bigint) => void) {
    this.connection.onReducer("close_collab_session", callback);
  }

  removeOnCloseCollabSession(callback: (ctx: ReducerEventContext, sessionId: bigint) => void) {
    this.connection.offReducer("close_collab_session", callback);
  }

  connectInventor(target: Identity) {
    const __args = { target };
    let __writer = new BinaryWriter(1024);
    ConnectInventor.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("connect_inventor", __argsBuffer, this.setCallReducerFlags.connectInventorFlags);
  }

  onConnectInventor(callback: (ctx: ReducerEventContext, target: Identity) => void) {
    this.connection.onReducer("connect_inventor", callback);
  }

  removeOnConnectInventor(callback: (ctx: ReducerEventContext, target: Identity) => void) {
    this.connection.offReducer("connect_inventor", callback);
  }

  onIdentityConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("identity_connected", callback);
  }

  removeOnIdentityConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("identity_connected", callback);
  }

  onIdentityDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("identity_disconnected", callback);
  }

  removeOnIdentityDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("identity_disconnected", callback);
  }

  joinCollabSession(sessionId: bigint) {
    const __args = { sessionId };
    let __writer = new BinaryWriter(1024);
    JoinCollabSession.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("join_collab_session", __argsBuffer, this.setCallReducerFlags.joinCollabSessionFlags);
  }

  onJoinCollabSession(callback: (ctx: ReducerEventContext, sessionId: bigint) => void) {
    this.connection.onReducer("join_collab_session", callback);
  }

  removeOnJoinCollabSession(callback: (ctx: ReducerEventContext, sessionId: bigint) => void) {
    this.connection.offReducer("join_collab_session", callback);
  }

  leaveCollabSession(sessionId: bigint) {
    const __args = { sessionId };
    let __writer = new BinaryWriter(1024);
    LeaveCollabSession.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("leave_collab_session", __argsBuffer, this.setCallReducerFlags.leaveCollabSessionFlags);
  }

  onLeaveCollabSession(callback: (ctx: ReducerEventContext, sessionId: bigint) => void) {
    this.connection.onReducer("leave_collab_session", callback);
  }

  removeOnLeaveCollabSession(callback: (ctx: ReducerEventContext, sessionId: bigint) => void) {
    this.connection.offReducer("leave_collab_session", callback);
  }

  monitorTick(info: MonitoringSchedule) {
    const __args = { info };
    let __writer = new BinaryWriter(1024);
    MonitorTick.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("monitor_tick", __argsBuffer, this.setCallReducerFlags.monitorTickFlags);
  }

  onMonitorTick(callback: (ctx: ReducerEventContext, info: MonitoringSchedule) => void) {
    this.connection.onReducer("monitor_tick", callback);
  }

  removeOnMonitorTick(callback: (ctx: ReducerEventContext, info: MonitoringSchedule) => void) {
    this.connection.offReducer("monitor_tick", callback);
  }

  registerInventor(name: string, email: string, affiliation: string, skills: string, bio: string) {
    const __args = { name, email, affiliation, skills, bio };
    let __writer = new BinaryWriter(1024);
    RegisterInventor.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("register_inventor", __argsBuffer, this.setCallReducerFlags.registerInventorFlags);
  }

  onRegisterInventor(callback: (ctx: ReducerEventContext, name: string, email: string, affiliation: string, skills: string, bio: string) => void) {
    this.connection.onReducer("register_inventor", callback);
  }

  removeOnRegisterInventor(callback: (ctx: ReducerEventContext, name: string, email: string, affiliation: string, skills: string, bio: string) => void) {
    this.connection.offReducer("register_inventor", callback);
  }

  resolveAlert(alertId: bigint) {
    const __args = { alertId };
    let __writer = new BinaryWriter(1024);
    ResolveAlert.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("resolve_alert", __argsBuffer, this.setCallReducerFlags.resolveAlertFlags);
  }

  onResolveAlert(callback: (ctx: ReducerEventContext, alertId: bigint) => void) {
    this.connection.onReducer("resolve_alert", callback);
  }

  removeOnResolveAlert(callback: (ctx: ReducerEventContext, alertId: bigint) => void) {
    this.connection.offReducer("resolve_alert", callback);
  }

  respondConnection(connectionId: bigint, accept: boolean) {
    const __args = { connectionId, accept };
    let __writer = new BinaryWriter(1024);
    RespondConnection.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("respond_connection", __argsBuffer, this.setCallReducerFlags.respondConnectionFlags);
  }

  onRespondConnection(callback: (ctx: ReducerEventContext, connectionId: bigint, accept: boolean) => void) {
    this.connection.onReducer("respond_connection", callback);
  }

  removeOnRespondConnection(callback: (ctx: ReducerEventContext, connectionId: bigint, accept: boolean) => void) {
    this.connection.offReducer("respond_connection", callback);
  }

  startCollabSession(title: string) {
    const __args = { title };
    let __writer = new BinaryWriter(1024);
    StartCollabSession.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("start_collab_session", __argsBuffer, this.setCallReducerFlags.startCollabSessionFlags);
  }

  onStartCollabSession(callback: (ctx: ReducerEventContext, title: string) => void) {
    this.connection.onReducer("start_collab_session", callback);
  }

  removeOnStartCollabSession(callback: (ctx: ReducerEventContext, title: string) => void) {
    this.connection.offReducer("start_collab_session", callback);
  }

  submitPatent(title: string, abstractText: string, claimsText: string) {
    const __args = { title, abstractText, claimsText };
    let __writer = new BinaryWriter(1024);
    SubmitPatent.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("submit_patent", __argsBuffer, this.setCallReducerFlags.submitPatentFlags);
  }

  onSubmitPatent(callback: (ctx: ReducerEventContext, title: string, abstractText: string, claimsText: string) => void) {
    this.connection.onReducer("submit_patent", callback);
  }

  removeOnSubmitPatent(callback: (ctx: ReducerEventContext, title: string, abstractText: string, claimsText: string) => void) {
    this.connection.offReducer("submit_patent", callback);
  }

  updatePatentStatus(applicationId: bigint, newStatus: PatentStatus) {
    const __args = { applicationId, newStatus };
    let __writer = new BinaryWriter(1024);
    UpdatePatentStatus.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("update_patent_status", __argsBuffer, this.setCallReducerFlags.updatePatentStatusFlags);
  }

  onUpdatePatentStatus(callback: (ctx: ReducerEventContext, applicationId: bigint, newStatus: PatentStatus) => void) {
    this.connection.onReducer("update_patent_status", callback);
  }

  removeOnUpdatePatentStatus(callback: (ctx: ReducerEventContext, applicationId: bigint, newStatus: PatentStatus) => void) {
    this.connection.offReducer("update_patent_status", callback);
  }

  updateStageProgress(applicationId: bigint, stage: Stage, percent: number) {
    const __args = { applicationId, stage, percent };
    let __writer = new BinaryWriter(1024);
    UpdateStageProgress.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("update_stage_progress", __argsBuffer, this.setCallReducerFlags.updateStageProgressFlags);
  }

  onUpdateStageProgress(callback: (ctx: ReducerEventContext, applicationId: bigint, stage: Stage, percent: number) => void) {
    this.connection.onReducer("update_stage_progress", callback);
  }

  removeOnUpdateStageProgress(callback: (ctx: ReducerEventContext, applicationId: bigint, stage: Stage, percent: number) => void) {
    this.connection.offReducer("update_stage_progress", callback);
  }

  upsertDocumentGeneration(applicationId: bigint, docType: DocType, status: DocGenStatus, errorMessage: string) {
    const __args = { applicationId, docType, status, errorMessage };
    let __writer = new BinaryWriter(1024);
    UpsertDocumentGeneration.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("upsert_document_generation", __argsBuffer, this.setCallReducerFlags.upsertDocumentGenerationFlags);
  }

  onUpsertDocumentGeneration(callback: (ctx: ReducerEventContext, applicationId: bigint, docType: DocType, status: DocGenStatus, errorMessage: string) => void) {
    this.connection.onReducer("upsert_document_generation", callback);
  }

  removeOnUpsertDocumentGeneration(callback: (ctx: ReducerEventContext, applicationId: bigint, docType: DocType, status: DocGenStatus, errorMessage: string) => void) {
    this.connection.offReducer("upsert_document_generation", callback);
  }

}

export class SetReducerFlags {
  addBlockchainRecordFlags: CallReducerFlags = 'FullUpdate';
  addBlockchainRecord(flags: CallReducerFlags) {
    this.addBlockchainRecordFlags = flags;
  }

  addPriorArtResultFlags: CallReducerFlags = 'FullUpdate';
  addPriorArtResult(flags: CallReducerFlags) {
    this.addPriorArtResultFlags = flags;
  }

  addToPortfolioFlags: CallReducerFlags = 'FullUpdate';
  addToPortfolio(flags: CallReducerFlags) {
    this.addToPortfolioFlags = flags;
  }

  analyticsTickFlags: CallReducerFlags = 'FullUpdate';
  analyticsTick(flags: CallReducerFlags) {
    this.analyticsTickFlags = flags;
  }

  closeCollabSessionFlags: CallReducerFlags = 'FullUpdate';
  closeCollabSession(flags: CallReducerFlags) {
    this.closeCollabSessionFlags = flags;
  }

  connectInventorFlags: CallReducerFlags = 'FullUpdate';
  connectInventor(flags: CallReducerFlags) {
    this.connectInventorFlags = flags;
  }

  joinCollabSessionFlags: CallReducerFlags = 'FullUpdate';
  joinCollabSession(flags: CallReducerFlags) {
    this.joinCollabSessionFlags = flags;
  }

  leaveCollabSessionFlags: CallReducerFlags = 'FullUpdate';
  leaveCollabSession(flags: CallReducerFlags) {
    this.leaveCollabSessionFlags = flags;
  }

  monitorTickFlags: CallReducerFlags = 'FullUpdate';
  monitorTick(flags: CallReducerFlags) {
    this.monitorTickFlags = flags;
  }

  registerInventorFlags: CallReducerFlags = 'FullUpdate';
  registerInventor(flags: CallReducerFlags) {
    this.registerInventorFlags = flags;
  }

  resolveAlertFlags: CallReducerFlags = 'FullUpdate';
  resolveAlert(flags: CallReducerFlags) {
    this.resolveAlertFlags = flags;
  }

  respondConnectionFlags: CallReducerFlags = 'FullUpdate';
  respondConnection(flags: CallReducerFlags) {
    this.respondConnectionFlags = flags;
  }

  startCollabSessionFlags: CallReducerFlags = 'FullUpdate';
  startCollabSession(flags: CallReducerFlags) {
    this.startCollabSessionFlags = flags;
  }

  submitPatentFlags: CallReducerFlags = 'FullUpdate';
  submitPatent(flags: CallReducerFlags) {
    this.submitPatentFlags = flags;
  }

  updatePatentStatusFlags: CallReducerFlags = 'FullUpdate';
  updatePatentStatus(flags: CallReducerFlags) {
    this.updatePatentStatusFlags = flags;
  }

  updateStageProgressFlags: CallReducerFlags = 'FullUpdate';
  updateStageProgress(flags: CallReducerFlags) {
    this.updateStageProgressFlags = flags;
  }

  upsertDocumentGenerationFlags: CallReducerFlags = 'FullUpdate';
  upsertDocumentGeneration(flags: CallReducerFlags) {
    this.upsertDocumentGenerationFlags = flags;
  }

}

export class RemoteTables {
  constructor(private connection: DbConnectionImpl) {}

  get analyticsSchedule(): AnalyticsScheduleTableHandle {
    return new AnalyticsScheduleTableHandle(this.connection.clientCache.getOrCreateTable<AnalyticsSchedule>(REMOTE_MODULE.tables.analytics_schedule));
  }

  get blockchainRecord(): BlockchainRecordTableHandle {
    return new BlockchainRecordTableHandle(this.connection.clientCache.getOrCreateTable<BlockchainRecord>(REMOTE_MODULE.tables.blockchain_record));
  }

  get collabParticipant(): CollabParticipantTableHandle {
    return new CollabParticipantTableHandle(this.connection.clientCache.getOrCreateTable<SessionParticipant>(REMOTE_MODULE.tables.collab_participant));
  }

  get collabSession(): CollabSessionTableHandle {
    return new CollabSessionTableHandle(this.connection.clientCache.getOrCreateTable<CollaborationSession>(REMOTE_MODULE.tables.collab_session));
  }

  get documentGeneration(): DocumentGenerationTableHandle {
    return new DocumentGenerationTableHandle(this.connection.clientCache.getOrCreateTable<DocumentGeneration>(REMOTE_MODULE.tables.document_generation));
  }

  get infringementAlert(): InfringementAlertTableHandle {
    return new InfringementAlertTableHandle(this.connection.clientCache.getOrCreateTable<InfringementAlert>(REMOTE_MODULE.tables.infringement_alert));
  }

  get inventor(): InventorTableHandle {
    return new InventorTableHandle(this.connection.clientCache.getOrCreateTable<InventorProfile>(REMOTE_MODULE.tables.inventor));
  }

  get inventorConnection(): InventorConnectionTableHandle {
    return new InventorConnectionTableHandle(this.connection.clientCache.getOrCreateTable<InventorConnection>(REMOTE_MODULE.tables.inventor_connection));
  }

  get marketTrendSnapshot(): MarketTrendSnapshotTableHandle {
    return new MarketTrendSnapshotTableHandle(this.connection.clientCache.getOrCreateTable<MarketTrendSnapshot>(REMOTE_MODULE.tables.market_trend_snapshot));
  }

  get monitoringSchedule(): MonitoringScheduleTableHandle {
    return new MonitoringScheduleTableHandle(this.connection.clientCache.getOrCreateTable<MonitoringSchedule>(REMOTE_MODULE.tables.monitoring_schedule));
  }

  get patentApplication(): PatentApplicationTableHandle {
    return new PatentApplicationTableHandle(this.connection.clientCache.getOrCreateTable<PatentApplication>(REMOTE_MODULE.tables.patent_application));
  }

  get portfolioEntry(): PortfolioEntryTableHandle {
    return new PortfolioEntryTableHandle(this.connection.clientCache.getOrCreateTable<PatentPortfolioEntry>(REMOTE_MODULE.tables.portfolio_entry));
  }

  get priorArtResult(): PriorArtResultTableHandle {
    return new PriorArtResultTableHandle(this.connection.clientCache.getOrCreateTable<PriorArtResult>(REMOTE_MODULE.tables.prior_art_result));
  }

  get stageProgress(): StageProgressTableHandle {
    return new StageProgressTableHandle(this.connection.clientCache.getOrCreateTable<StageProgress>(REMOTE_MODULE.tables.stage_progress));
  }
}

export class SubscriptionBuilder extends SubscriptionBuilderImpl<RemoteTables, RemoteReducers, SetReducerFlags> { }

export class DbConnection extends DbConnectionImpl<RemoteTables, RemoteReducers, SetReducerFlags> {
  static builder = (): DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext> => {
    return new DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext>(REMOTE_MODULE, (imp: DbConnectionImpl) => imp as DbConnection);
  }
  subscriptionBuilder = (): SubscriptionBuilder => {
    return new SubscriptionBuilder(this);
  }
}

export type EventContext = EventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type ReducerEventContext = ReducerEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type SubscriptionEventContext = SubscriptionEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
export type ErrorContext = ErrorContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
